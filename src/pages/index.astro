---
import Header from "../components/Header.astro";
import Layout from "../layouts/Layout.astro";
import Card from "../components/Card.astro";
import Scene3D from "../components/Scene3D.astro";
import escena from "../assets/greenleaf_comp.glb";
import card1 from "../assets/card1.svg?raw";
import card2 from "../assets/card2.svg?raw";
import card3 from "../assets/card3.svg?raw";

const focus_content = "Our focus".split("");
const approach_content = "Our approach".split("");
const team_content = "Team".split("");
const focus_spans = focus_content
	.map((letter, index) => {
		return `<span class="letter letter-${index}">${letter}</span>`;
	})
	.join("");
const approach_spans = approach_content
	.map((letter, index) => {
		return `<span class="letter letter-${index}">${letter}</span>`;
	})
	.join("");
const team_spans = team_content
	.map((letter, index) => {
		return `<span class="letter letter-${index}">${letter}</span>`;
	})
	.join("");
---

<Layout>
	<Header />
	<div id="sections">
		<section id="our-focus" class="page-section">
			<div
				id="our-focus-contents"
				class="section-contents container-fluid"
			>
				<div class="row section-title">
					<h1><Fragment set:html={focus_spans} /></h1>
				</div>
				<div class="row">
					<h3>
						We aim to provide next-generation biobactericides by
						engineering natural killers of bacteria
					</h3>
				</div>
				<div class="row cards">
					<div class="card-col col-lg-3">
						<Card title="Pre-harvest loss">
							<Fragment set:html={card1} />
						</Card>
					</div>
					<div class="card-col col-lg-3">
						<Card title="Post-harvest storage spoilage">
							<Fragment set:html={card2} />
						</Card>
					</div>
					<div class="card-col col-lg-3">
						<Card title="Foodborne disease">
							<Fragment set:html={card3} />
						</Card>
					</div>
				</div>
			</div>
		</section>
		<section id="our-approach" class="page-section">
			<div class="our-approach-bg" id="our-approach-bg-1"></div>
			<div class="our-approach-bg" id="our-approach-bg-2"></div>
			<div class="our-approach-bg" id="our-approach-bg-3"></div>
			<div
				id="our-approach-contents"
				class="section-contents container-fluid"
			>
				<div class="row section-title">
					<h1><Fragment set:html={approach_spans} /></h1>
				</div>
				<div class="row">
					<div
						id="our-approach-text"
						class="col-xxl-6 align-self-center"
					>
						<h3>
							Contenido a la izquierda en una columna que ocupa la
							mayoría del espacio disponible
						</h3>
					</div>
					<div class="col-xxl-6 mt-5">
						<div id="model3d">
							<Scene3D glbPath={escena} camera="Camera" />
						</div>
					</div>
				</div>
			</div>
		</section>
		<section id="team" class="page-section">
			<div id="team-contents" class="section-contents container-fluid">
				<div class="row section-title">
					<h1><Fragment set:html={team_spans} /></h1>
				</div>
				<div class="row"></div>
			</div>
		</section>
	</div>
</Layout>

<style>
	#our-focus {
		background: linear-gradient(to right, #faece0, white);
	}
	#our-approach {
		background: linear-gradient(to right, #ff9e9a, #faece0);
	}
	#team {
		background: linear-gradient(to right, #faece0, white);
		z-index: 5;
	}
	.cards {
		margin-top: 50px;
		justify-content: center;

		.card-col {
			justify-items: center;
			position: relative;
		}

		path,
		g {
			will-change: transform;
		}
	}

	.cards .card-col + .card-col {
		margin-top: 50px;
	}

	#model3d {
		height: 70vh;
		border-radius: 20px;
		position: relative;
		overflow: visible;
		z-index: -10 !important;
	}

	@media screen and (min-width: 992px) {
		.card-col {
			/* width: 22vw; */
		}
		.cards .card-col + .card-col {
			margin-top: 0px;

			&::before {
				content: "▷";
				text-indent: 5px;
				display: block;
				position: absolute;
				top: 50%;
				left: 0;
				width: 100px;
				height: 100px;
				border-radius: 100%;
				background: #ff9e9a;
				color: #faece0;
				text-align: center;
				font-size: 50px;
				z-index: 50;
				transform: translateY(-50%) translateX(-50%);
				outline: solid #faece0 5px;
				align-content: center;
				text-box-trim: trim-start;
			}
		}
	}

	@media screen and (min-width: 1400px) {
		#our-approach {
			background: linear-gradient(to right, #ff7e79 50%, #faece0 90%);
		}

		.our-approach-bg {
			content: "";
			top: 0px;
			left: 0px;
			display: block;
			position: absolute;
			height: 100%;
			width: 60%;
			background-color: white;
			z-index: 3;
			transform: skewX(-10deg);
			transform-origin: top;
		}
		#our-approach-bg-1 {
			z-index: 3;
			left: -100px;
			background: linear-gradient(to bottom, #faece0, white);
		}
		#our-approach-bg-2 {
			z-index: 2;
			left: -50px;
			background: #ffdac5;
		}
		#our-approach-bg-3 {
			z-index: 1;
			background: #ffb8a6;
		}
		#our-approach-contents {
			z-index: 4;
			position: relative;
		}
	}
</style>

<script>
	import { animate, onScroll, stagger } from "../scripts/anime.esm.min";
	document.addEventListener("astro:page-load", () => {
		// Only run this code for the index page
		if (window.location.pathname !== "/greenleaf/") return;
		let mouseX = 0;
		let mouseY = 0;
		let targetX = 0;
		let targetY = 0;
		const parallaxIntensity = 0.001;
		const easing = 0.05; // Adjust easing for smoother transitions

		// Detect if the user is on a mobile device
		const isMobile = /Mobi|Android/i.test(navigator.userAgent);

		// Function to apply transformations
		function applyTransformations(x, y) {
			document
				.querySelectorAll(".card path, .card g")
				.forEach((element) => {
					let depth = element.getAttribute("data-depth");
					if (depth) {
						let transformX = x * depth * parallaxIntensity;
						let transformY = y * depth * parallaxIntensity;
						element.style.transform = `translate(${transformX}px, ${transformY}px)`;
					}
				});
		}

		if (isMobile) {
			let tiltX = 0;
			let tiltY = 0;
			let lastTiltX = 0;
			let lastTiltY = 0;
			let targetTiltX = 0;
			let targetTiltY = 0;
			let lastUpdate = Date.now();
			const throttleInterval = 50; // Update every 50ms

			// Use device orientation for tilt effect on mobile
			window.addEventListener("deviceorientation", (event) => {
				const now = Date.now();
				if (now - lastUpdate >= throttleInterval) {
					targetTiltX = event.gamma == null ? 0 : event.gamma; // Left-to-right tilt in degrees
					targetTiltY = event.beta == null ? 0 : event.beta; // Front-to-back tilt in degrees
					lastUpdate = now;
				}
			});

			function animateTilt() {
				tiltX += (targetTiltX - tiltX) * easing;
				tiltY += (targetTiltY - tiltY) * easing;

				// Only update if the change is significant
				if (
					Math.abs(tiltX - lastTiltX) > 0.1 ||
					Math.abs(tiltY - lastTiltY) > 0.1
				) {
					applyTransformations(tiltX * 10, tiltY * 10);
					lastTiltX = tiltX;
					lastTiltY = tiltY;
				}

				requestAnimationFrame(animateTilt);
			}

			// Start the animation loop
			animateTilt();
		} else {
			// Use mouse movement for parallax effect on desktop
			document.addEventListener("mousemove", (event) => {
				// Center the translation at half the screen
				targetX = event.clientX - window.innerWidth / 2;
				targetY = event.clientY - window.innerHeight / 2;
			});

			function animateParallax() {
				// Smoothly interpolate mouse position
				mouseX += (targetX - mouseX) * easing;
				mouseY += (targetY - mouseY) * easing;

				applyTransformations(mouseX, mouseY);

				requestAnimationFrame(animateParallax);
			}

			// Start the animation loop
			animateParallax();
		}

		document
			.querySelectorAll(".section-contents")
			.forEach((section, index) => {
				animate(section, {
					opacity: [0, 1],
					translateX: ["-100%", "0%"],
					duration: 1000,
					easing: "linear",
					autoplay: onScroll({
						enter: "90% top",
						leave: "40% top",
						sync: 0.1,
					}),
				});

				animate(section.querySelectorAll("h1 span"), {
					opacity: [0, 1],
					translateY: ["-100%", "0%"],
					"--pseudo-el-before-x": ["-100%", "0%"],
					duration: 1000,
					delay: stagger(200),
					autoplay: onScroll({
						enter: "90% top",
						leave: "40% top",
						sync: 0.1,
					}),
				});
			});

		animate(".card", {
			opacity: [0, 0, 1],
			translateY: ["100%", "0%"],
			duration: 1000,
			delay: stagger(200),
			autoplay: onScroll({
				enter: "bottom top",
				leave: "40% top",
				sync: 0.2,
			}),
		});
		animate("#model3d", {
			opacity: [0, 0, 1],
			translateY: ["100%", "0%"],
			duration: 1000,
			autoplay: onScroll({
				enter: "bottom top",
				leave: "40% top",
				sync: 0.2,
			}),
		});
		animate(".our-approach-bg", {
			x: ["-100%", "0%"],
			skewX: ["-10deg", "-10deg"],
			boxShadow: [
				"50px 0px 50px rgba(0, 0, 0, 0.1)",
				"20px 0px 20px rgba(0, 0, 0, 0.1)",
			],
			duration: 1000,
			delay: stagger(-200),
			autoplay: onScroll({
				enter: "bottom top",
				leave: "40% top",
				sync: 0.2,
			}),
		});
	});
</script>
